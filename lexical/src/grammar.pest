
program = _{ SOI ~ declaration_list ~ EOI}

alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }

ident = { alpha ~ (alpha | digit)* }

number = { digit+ }

linebreak = _{ "\r" | "\n" }

WHITESPACE = _{ " " | "\t" | linebreak }

COMMENT = { "//" ~ (!linebreak ~ ANY)* ~ linebreak? }

declaration_list = _{ declaration+ }

declaration = _{ fn_declaration | var_declaration }

fn_declaration = { (type_specifier | void) ~ ident ~ "(" ~ formal_parameters ~ ")" ~ compound_stmt }

var_declaration = { type_specifier ~ var_decl_list ~ ";" }

var_decl_list = { var_decl_maybe_init ~ ("," ~ var_decl_maybe_init)* }

var_decl_maybe_init = { ident ~ ("=" ~ expression)? }

void = { "void" } 

type_specifier = { "uint8_t" | "int8_t" | "int" | "unsigned" }

formal_parameters = _{ parameter+ | void }

parameter = { type_specifier ~ ident ~ ","? }

compound_stmt = { "{" ~ statement_list ~ "}" }

statement_list = _{ statement* }

statement = { compound_stmt | expression_stmt | var_declaration | return_stmt }

return_stmt = { "return" ~ expression? ~ ";" }

expression_stmt = { expression ~ ";" }

decl_list = _{ var_declaration+ }

expression = { assignment_expression }

var = { ident }

assignment_expression = { var ~ "=" ~ expression | bool_expression }

bool_expression = { bool_expression ~ bool_op ~ rel_expression | rel_expression }

bool_op = { "&&" | "||" }

rel_expression = { rel_expression ~ rel_op ~ eq_expression | eq_expression }

rel_op = { "<" | ">" | "<=" | ">=" }

eq_expression = { eq_expression ~ eq_op ~ additive_expression | additive_expression }

eq_op = { "==" | "!=" }

additive_expression = { additive_expression ~ additive_op ~ mult_expression | mult_expression }

additive_op = { "+" | "-" }

mult_expression = { mult_expression ~ mult_op ~ factor | factor }

mult_op = { "*" | "/" }

factor = { "(" ~ expression ~ ")" | var | number | unary ~ factor | array_access }

unary = { "-" | "!" | "+" }

array_access = { var ~ "[" ~ expression ~ "]" }

function_call = { var ~ "(" ~ actual_parameters ~ ")" }

actual_parameters = _{ expression ~ ","? }