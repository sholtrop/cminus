
program = _{ SOI ~ declaration_list ~ EOI}

alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }

ident = @{ !keyword ~ ((alpha | "_") ~ (alpha | digit | "_")*) }

number = @{ digit+ }

linebreak = _{ "\r" | "\n" }

WHITESPACE = { " " | "\t" | linebreak }

COMMENT = { "//" ~ (!linebreak ~ ANY)* ~ linebreak? | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }	

declaration_list = _{ declaration+ }

declaration = _{ fn_declaration | var_declaration }

fn_declaration = { (type_specifier | void) ~ ident ~ "(" ~ formal_parameters ~ ")" ~ compound_stmt }

var_declaration = { type_specifier ~ var_decl_list ~ ";" }

var_decl_list = { any_var_decl ~ ("," ~ any_var_decl)* }

any_var_decl = _{ array_decl | var_decl_maybe_init }

var_decl_maybe_init = { ident ~ ("=" ~ expression)? }

array_decl = { ident ~ "[" ~ number ~ "]" }

void = { "void" } 

type_specifier = { "unsigned int" | "uint8_t" | "int8_t" | "int" | "unsigned" }

formal_parameters = { parameter+ | void }

var = { !keyword ~ (array_access | ident) }

parameter = { type_specifier ~ ident ~ "[]"? ~ ","? }

compound_stmt = { "{" ~ statement_list ~ "}" }

statement_list = _{ (statement | var_declaration)* }

statement = _{ 
    compound_stmt 
    | return_stmt 
    | iteration_stmt 
    | selection_stmt
    | expression_stmt 
}

return_stmt = { "return" ~ expression_stmt }

expression_stmt = _{ expression ~ ";" | ";" }

decl_list = _{ var_declaration+ }

expression = { assignment | factor ~ (operation ~ factor)* }

assignment = { var ~ assign ~ expression }
assign = { "=" }

operation = { add | sub | mul | div | modulo | lte | gte | neq | eq | gt | lt | and | or } 
    add = { "+" }
    sub = { "-" }
    mul = { "*" }
    div = { "/" }
    modulo = { "%" }
    and = { "&&" }
    or = { "||" }
    eq = { "==" }
    neq = { "!=" }
    lt = { "<" }
    gt = { ">" }
    lte = { "<=" }
    gte = { ">=" }

// assignment_expression = _{ var ~ assign_op ~ expression | bool_expression }

// assign_op = { "=" }

// bool_expression = _{ rel_expression ~ (boolean_op ~ bool_expression)* }

// boolean_op = { "&&" | "||" }

// rel_expression = _{ eq_expression ~ (relational_op ~ rel_expression)* }

// relational_op = { "<=" | ">=" | "<" | ">" }

// eq_expression = _{ additive_expression ~ (eq_op ~ eq_expression)* }

// eq_op = { "==" | "!=" }

// additive_expression = _{ mult_expression ~ (additive_op ~ additive_expression)* }

// additive_op = { "+" | "-" }

// mult_expression = _{ factor ~ (multiplicative_op ~ mult_expression)* }

// multiplicative_op = { "*" | "/" | "%" }

factor = _{ "(" ~ expression ~ ")" | function_call | var | number | unary ~ factor }

unary = { "-" | "!" | "+" }

array_access = { ident ~ "[" ~ expression ~ "]" }

function_call = { ident ~ "(" ~ actual_parameters? ~ ")" }

actual_parameters = { expression ~ ("," ~ expression)* }

iteration_stmt = { "while" ~ "(" ~ expression ~ ")" ~ statement }

selection_stmt = { "if" ~ "(" ~ expression ~ ")" ~ statement ~ ("else" ~ statement)? }

keyword = { "if" | "else" | "while" | "return" | type_specifier | "void" }